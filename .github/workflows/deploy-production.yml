name: Deploy to Production with AWS ECR

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  ECR_FE_REPOSITORY: leastric-fe-production
  ECR_CMS_REPOSITORY: leastric-cms-production
  FE_IMAGE_NAME: leastric-fe
  CMS_IMAGE_NAME: leastric-cms

jobs:
  # Job 1: Build Frontend
  build-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:
      fe-image-digest: ${{ steps.build-fe.outputs.digest }}
      fe-image-tag: ${{ steps.meta-fe.outputs.tags }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Frontend Image Metadata
        id: meta-fe
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FE_REPOSITORY }}
          tags: |
            type=raw,value=production-latest
            type=raw,value=production-{{sha}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=${{ env.FE_IMAGE_NAME }}
            org.opencontainers.image.description=Leastric Frontend Application - Production
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=production-${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            git.commit=${{ github.sha }}
            git.branch=${{ github.ref_name }}
            build.timestamp=${{ github.event.head_commit.timestamp }}

      - name: Build and Push Frontend Docker Image
        id: build-fe
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta-fe.outputs.tags }}
          labels: ${{ steps.meta-fe.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_TELEMETRY_DISABLED=1
            PRODUCTION_NEXT_PUBLIC_API_BASE_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_API_BASE_URL }}
            PRODUCTION_NEXT_PUBLIC_NODE_ENV=${{ secrets.PRODUCTION_NEXT_PUBLIC_NODE_ENV }}
            PRODUCTION_NEXT_PUBLIC_MQTT_USERNAME=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_USERNAME }}
            PRODUCTION_NEXT_PUBLIC_MQTT_PASSWORD=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_PASSWORD }}
            PRODUCTION_NEXT_PUBLIC_MQTT_BROKER_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_BROKER_URL }}
            PRODUCTION_NEXT_PUBLIC_IS_ADMIN=${{ secrets.PRODUCTION_NEXT_PUBLIC_IS_ADMIN }}
            PRODUCTION_NEXT_PUBLIC_WS_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_WS_URL }}

      - name: Update Frontend deployment status
        run: |
          echo "Frontend image pushed successfully!"
          echo "Using backend url: ${{ secrets.PRODUCTION_NEXT_PUBLIC_API_BASE_URL }}"
          echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FE_REPOSITORY }}:production-latest"
          echo "Image Digest: ${{ steps.build-fe.outputs.digest }}"

  # Job 2: Build CMS Frontend
  build-cms-frontend:
    name: Build and Deploy CMS Frontend
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:
      cms-image-digest: ${{ steps.build-cms.outputs.digest }}
      cms-image-tag: ${{ steps.meta-cms.outputs.tags }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate CMS Frontend Image Metadata
        id: meta-cms
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CMS_REPOSITORY }}
          tags: |
            type=raw,value=production-latest
            type=raw,value=production-{{sha}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=${{ env.CMS_IMAGE_NAME }}
            org.opencontainers.image.description=Leastric CMS Frontend Application - Production
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=production-${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            git.commit=${{ github.sha }}
            git.branch=${{ github.ref_name }}
            build.timestamp=${{ github.event.head_commit.timestamp }}

      - name: Build and Push CMS Frontend Docker Image
        id: build-cms
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          target: runner
          tags: ${{ steps.meta-cms.outputs.tags }}
          labels: ${{ steps.meta-cms.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_TELEMETRY_DISABLED=1
            PRODUCTION_NEXT_PUBLIC_API_BASE_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_API_BASE_URL }}
            PRODUCTION_NEXT_PUBLIC_NODE_ENV=${{ secrets.PRODUCTION_NEXT_PUBLIC_NODE_ENV }}
            PRODUCTION_NEXT_PUBLIC_MQTT_USERNAME=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_USERNAME }}
            PRODUCTION_NEXT_PUBLIC_MQTT_PASSWORD=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_PASSWORD }}
            PRODUCTION_NEXT_PUBLIC_MQTT_BROKER_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_MQTT_BROKER_URL }}
            PRODUCTION_NEXT_PUBLIC_IS_ADMIN=true
            PRODUCTION_NEXT_PUBLIC_WS_URL=${{ secrets.PRODUCTION_NEXT_PUBLIC_WS_URL }}

      - name: Update CMS Frontend deployment status
        run: |
          echo "CMS Frontend image pushed successfully!"
          echo "Using backend url: ${{ secrets.PRODUCTION_NEXT_PUBLIC_API_BASE_URL }}"
          echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_CMS_REPOSITORY }}:production-latest"
          echo "Image Digest: ${{ steps.build-cms.outputs.digest }}"
